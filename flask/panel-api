#!/usr/bin/env python3

from flask import Flask
import time
import board
import neopixel
from adafruit_pixel_framebuf import PixelFramebuffer, VERTICAL
import threading

# Choose an open pin connected to the Data In of the NeoPixel strip, i.e. board.D18
# NeoPixels must be connected to D10, D12, D18 or D21 to work.
pixel_pin = board.D18
# The number of NeoPixels
ORDER = neopixel.GRB

class MyPanel():
    def __init__(self, pixel_width=32, pixel_height=8, shutdown_event=None):
        self.msg = "Under Construction"
        self.pixel_width = pixel_width
        self.pixel_height = pixel_height
        self.pixels = neopixel.NeoPixel(
            pixel_pin, pixel_height * pixel_width, brightness=0.25, auto_write=False, pixel_order=ORDER
        )
        self.pixel_framebuf = PixelFramebuffer(
            self.pixels,
            self.pixel_width,
            self.pixel_height,
            orientation=VERTICAL,
            rotation=2,
        )
        self.scrolling = True
        self.panel_off = False
        self.shutdown = shutdown_event
        self.reverse_color = False
        self.bg_color = 0x000000
        self.fg_color = None

    def wheel(self,pos):
        # Input a value 0 to 255 to get a color value.
        # The colours are a transition r - g - b - back to r.
        if pos < 0 or pos > 255:
            r = g = b = 0
        elif pos < 85:
            r = int(pos * 3)
            g = int(255 - pos * 3)
            b = 0
        elif pos < 170:
            pos -= 85
            r = int(255 - pos * 3)
            g = 0
            b = int(pos * 3)
        else:
            pos -= 170
            r = 0
            g = int(pos * 3)
            b = int(255 - pos * 3)
        return (r, g, b) if ORDER in (neopixel.RGB, neopixel.GRB) else (r, g, b, 0)

    def bgFill(self):
        if self.bg_color == 0x000000:
            return

        for x in range(self.pixel_width):
            for y in range(self.pixel_height):
                c = self.pixel_framebuf.pixel(x,y)
                if (c == 0):
                    self.pixel_framebuf.pixel(x,y,self.bg_color)

    def rainbowLit(self):
        for x in range(self.pixel_width):
            for y in range(self.pixel_height):
                c = self.pixel_framebuf.pixel(x,y)
                if (c != 0):
                    self.pixel_framebuf.pixel(x,y,self.wheel((x * self.pixel_height + y) & 255))

    def rainbowPanel(self):
        for x in range(self.pixel_width):
            for y in range(self.pixel_height):
                self.pixel_framebuf.pixel(x,y,self.wheel((x * self.pixel_height + y) & 255))

    def off(self):
        self.panel_off = True

    def setMessage(self, msg, scrolling=True, reverse_color=False, bg_color=0x000000, fg_color=None):
        self.msg = msg
        self.scrolling = scrolling
        self.panel_off = False
        self.bg_color = bg_color
        self.reverse_color = reverse_color
        self.fg_color = fg_color

    def updatePanel(self):
        offset = self.pixel_width

        while self.shutdown is None or not self.shutdown.isSet():
            if not self.scrolling:
                offset = 0

            if self.panel_off:
                self.pixel_framebuf.fill(0x000000)
                self.pixel_framebuf.display()
            else:
                if self.reverse_color:
                    self.rainbowPanel()
                    self.pixel_framebuf.text(self.msg,offset,0,0x000000,font_name='/home/pi/pi/flask/font5x8.bin')
                else:
                    self.pixel_framebuf.fill(0x000000)
                    if self.fg_color is None:
                        self.pixel_framebuf.text(self.msg,offset,0,0xFFFFFF,font_name='/home/pi/pi/flask/font5x8.bin')
                        self.rainbowLit()
                    else:
                        self.pixel_framebuf.text(self.msg,offset,0,self.fg_color,font_name='/home/pi/pi/flask/font5x8.bin')
                    self.bgFill()
                self.pixel_framebuf.display()

            time.sleep(.07) # scrolling text speed

            offset -= 1
            if offset < -(len(self.msg)*6):
                offset = self.pixel_width

        # clear and exit
        self.pixel_framebuf.fill(0x000000)
        self.pixel_framebuf.display()


app = Flask(__name__)
shutdown = threading.Event()
mypanel = MyPanel(shutdown_event=shutdown)

@app.route('/')
def hello():
    return 'Hello'

@app.route('/msg/<path:message>')
def message(message):
    mypanel.setMessage(message, scrolling=False)
    return 'OK'

@app.route('/scroll/<path:message>')
def scroll(message):
    mypanel.setMessage(message)
    return 'OK'

@app.route('/defcon/<int:num>')
def defcon(num):
    if num == 1:
        color = 0xFFFFFF
    elif num == 2:
        color = 0xFF0000
    elif num == 3:
        color = 0xFFFF00
    elif num == 4:
        color = 0x00FF00
    elif num == 5:
        color = 0x0000FF
    msg = "DEFCON {}".format(num)
    mypanel.setMessage(msg, scrolling=True, fg_color=0x010101, bg_color=color)
    return 'OK'

@app.route('/off')
def off():
    mypanel.off()
    return 'OK'

if __name__ == '__main__':
    panel = threading.Thread(target=mypanel.updatePanel)
    panel.start()
    app.debug = True
    app.run(host='0.0.0.0', port=8080, debug=False)
    shutdown.set()
    panel.join()
